{"version":3,"sources":["app/Public/Resources/Images/logo.png","app/js/Utility/Wrapper/Wrapper.js","app/js/Components/Search/Search.js","app/js/Utility/Context/SocketContext.js","app/js/Components/ContentView/TrackView/TrackView.js","app/js/Components/Search/SearchResults.js","app/js/Utility/Configuration/TrackViewConfig.js","app/js/Containers/Sidebar/Sidebar.js","app/js/Components/Header/Header.js","app/js/Store/Actions/ActionTypes.js","app/js/Components/QueueBar/QueueBar.js","app/js/Containers/RoomController/RoomController.js","app/js/Components/MusicPlayerFooter/MusicPlayerFooter.js","app/js/Containers/SpotifyMusicPlayer/SpotifyMusicPlayer.js","app/js/Containers/MusicRoom/MusicRoom.js","app/js/Components/Authenticate/Authenticate.js","app/js/Components/LogonPage/LogonPage.js","app/js/Containers/Logon/Logon.js","app/js/App.js","app/js/serviceWorker.js","app/js/Store/Reducers/reducer.js","app/js/Store/Config/configureStore.js","index.js","app/api/Spotify/Spotify.js"],"names":["module","exports","Wrapper","props","className","children","Search","style","color","type","onChange","e","searchChange","SocketContext","React","createContext","TrackView","config","isPlayable","onClick","changeSong","track","album","images","length","width","height","heightUnit","src","url","alt","name","canQueue","addToQueue","socket","userId","canRemoveQueue","removeFromQueue","queuePosition","user","payload","trackInfo","trackId","id","albumName","albumSrc","uri","userInfo","emit","connect","state","currentSong","Consumer","SearchResults","data","tracks","items","map","index","key","Sidebar","handleSearchChange","event","setState","searchConfig","query","target","value","shouldComponentUpdate","nextProps","newState","options","limit","artist","playlist","test","this","searchResult","loading","error","Component","withRouter","dispatch","logoutUser","href","logo","QueueBar","console","log","queue","RoomController","joinRoom","roomId","accessToken","tokenParams","access_token","prevClick","playClick","nextClick","SpotifyMusicPlayer","createEventHandlers","player","on","playerInitError","duration","val","position","playingInfo","playing","paused","positionSliderValue","isPlaying","positionCheckInterval","setInterval","checkChangePosition","clearInterval","currentlyPlaying","track_window","current_track","device_id","deviceId","transferPlaybackHere","getVolume","then","vol","volume","volumeSliderValue","checkForPlayer","window","Spotify","playerCheckInterval","token","Player","getOAuthToken","cb","position_ms","spotify_uri","playerInstance","_options","fetch","method","body","JSON","stringify","uris","headers","pauseSong","Authorization","device_ids","play","res","status","axios","get","CheckChangePosition","catch","err","getCurrentState","positionStamp","milisToMinutesAndSeconds","durationStamp","mil","minutes","Math","floor","seconds","toFixed","timeStringToMilis","timeString","a","split","context","positionTimestamp","durationTimestamp","syncPlayClick","syncPrevClick","syncNextClick","updatePlayer","Date","now","startTimestamp","pausePlayer","playInstance","componentDidMount","isLoggedIn","isAuthenticated","setPlayer","MusicRoom","updateQueue","newQueue","response","socketIOClient","Provider","to","LogonPage","authenticateUser","hidden","Logon","AccessTokenCallBack","resp","SetAuthentication","params","authStatus","includes","parse","RetrieveUserInfo","newUser","displayName","display_name","email","country","product","setAuthentication","SetAuthState","authorizeCode","GetUrlVars","RetrieveAccessToken","setTimeout","setUserLogin","location","ReturnAuthorizeQueryString","match","exact","path","loginStatus","PrivateRoute","component","rest","render","pathname","from","App","Boolean","hostname","initialState","reducer","action","persistConfig","storage","persistedReducer","persistReducer","rootReducer","store","createStore","persistor","persistStore","ReactDOM","storeAndPersistor","isHydrating","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message","request","require","clientId","process","redirectUri","scopes","callback","form","grant_type","code","redirect_uri","Buffer","toString","post","REACT_APP_SPOTIFY_CLIENT_ID","REACT_APP_SPOTIFY_REDIRECT_URI","REACT_APP_SPOTIFY_SCOPE","join","vars","replace","m"],"mappings":"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","file":"static/js/main.d3e1882d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.daf13776.png\";","import React from 'react';\r\n\r\nconst Wrapper = (props) => (\r\n\t<div className={props.className}>\r\n\t\t{props.children}\r\n\t</div>\r\n);\r\n\r\nexport default Wrapper;","import React from 'react'\r\n\r\nconst Search = (props) => {\r\n    return (\r\n        <div>\r\n            <div style={{color: 'white'}}>Search</div>    \r\n            <input type='search' onChange={e => props.searchChange(e)}></input>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Search","import React from 'react';\r\n\r\nconst SocketContext = React.createContext();\r\n\r\nexport default SocketContext;","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport './TrackView.css';\r\nimport SocketContext from '../../../Utility/Context/SocketContext.js';\r\n\r\nconst TrackView = (props) => {\r\n    return (\r\n        <div className='trackview_container'>\r\n            {props.config.isPlayable ? (\r\n                <div className='trackview_album' onClick={() => props.changeSong()}>\r\n                    {props.track.album.images.length > 0 ? \r\n                    <img style={{width: 'auto', height: props.config.height + props.config.heightUnit}} src={props.track.album.images[props.track.album.images.length - 1].url} alt=''></img> : null }\r\n                </div>\r\n            ) : (\r\n                <div>\r\n                {props.track.album.images.length > 0 ? \r\n                <img style={{width: 'auto', height: props.config.height + props.config.heightUnit}} src={props.track.album.images[props.track.album.images.length - 1].url} alt=''></img> : null }\r\n            </div>\r\n            )}\r\n\r\n            <div>\r\n                <div style={{color: 'white'}}>{props.track.name}</div>\r\n                <div style={{color: 'white'}}>{props.track.album.name}</div>\r\n            </div>\r\n\r\n            {props.config.canQueue ? <div onClick={() => addToQueue(props.socket, props.track, props.userId)}><button>+</button></div> : <div></div>}\r\n            {props.config.canRemoveQueue ? <div onClick={() => removeFromQueue(props.socket, props.track.queuePosition, props.userId)}><button>-</button></div>: <div></div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst addToQueue = (socket, track, user) => {\r\n    const payload = {\r\n        trackInfo: {\r\n            trackId: track.id,\r\n            name: track.name,\r\n            albumName: track.album.name,\r\n            albumSrc: track.album.images.length > 0 ? track.album.images[track.album.images.length - 1].url : null,\r\n            uri: track.uri\r\n        },\r\n        userInfo: {\r\n            userId: user\r\n        }\r\n\r\n    }\r\n    socket.emit('addToQueue', payload);\r\n}\r\n\r\nconst removeFromQueue = (socket, queuePosition, user) => {\r\n    const payload = {\r\n        trackInfo: {\r\n            queuePosition: queuePosition\r\n        },\r\n        userInfo: {\r\n            userId: user\r\n        }\r\n\r\n    }\r\n    socket.emit('removeFromQueue', payload);\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n      currentSong: state.currentSong,\r\n      userId: state.user.id\r\n    }\r\n};\r\n\r\nconst TrackViewWithSocket = (props) => (\r\n    <SocketContext.Consumer>\r\n      {socket => <TrackView {...props} socket={socket}></TrackView>}\r\n    </SocketContext.Consumer>\r\n)\r\n\r\nexport default connect(mapStateToProps)(TrackViewWithSocket)","import React from 'react'\r\nimport ArtistView from '../ContentView/ArtistView/ArtistView.js';\r\nimport TrackView from '../ContentView/TrackView/TrackView.js';\r\nimport Wrapper from '../../Utility/Wrapper/Wrapper.js';\r\nimport { SearchTrackConfig } from '../../Utility/Configuration/TrackViewConfig.js';\r\nimport '../../Utility/Wrapper/Wrapper.css';\r\n\r\nconst SearchResults = (props) => {\r\n    let config = SearchTrackConfig();\r\n    \r\n    return (\r\n        <div>\r\n            <h1>Song Results</h1>\r\n            {props.data.tracks.items.map((track, index) => (                \r\n                <Wrapper key={track.id + 'songResults' + index} className='tracksearchwrapper'>\r\n                    <TrackView track={track} config={config}></TrackView>\r\n                </Wrapper>\r\n            ))}\r\n\r\n            \r\n            {/* <h1>Album Results</h1>\r\n            {props.data.albums.items.map((album) => (\r\n                \r\n                <div key={album.id}>\r\n                    {album.images.length > 0 ? <img src={album.images[album.images.length - 1].url} alt=''></img> : null}\r\n                    <div style={{color: 'white'}}>{album.name}</div>\r\n                </div>\r\n            ))}\r\n\r\n            <h1>Artist Results</h1>\r\n            {props.data.artists.items.map((artist) => (\r\n                \r\n                <div key={artist.id}>\r\n                    {artist.images.length > 0 ? <img src={artist.images[artist.images.length - 1].url} alt=''></img> : null}                  \r\n                    <div style={{color: 'white'}}>{artist.name}</div>\r\n                </div>\r\n            ))}\r\n            \r\n            <h1>Playlist Results</h1>\r\n            {props.data.playlists.items.map((playlist) => (\r\n                \r\n                <div key={playlist.id}>\r\n                    {playlist.images.length > 0 ? <img src={playlist.images[playlist.images.length - 1].url} alt=''></img> : null }\r\n                    <div style={{color: 'white'}}>{playlist.name}</div>\r\n                    <div style={{color: 'white'}}>{playlist.owner.display_name}</div>\r\n                </div>\r\n            ))} */}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default SearchResults;\r\n","export const SearchTrackConfig = () => {\r\n    return ({\r\n        height: 4.5,\r\n        heightUnit: 'em',\r\n        isPlayable: true,\r\n        canQueue: true,\r\n        canRemoveQueue: false\r\n    })\r\n}\r\n\r\nexport const CurrentTrackConfig = () => {\r\n    return ({\r\n        height: 6,\r\n        heightUnit: 'em',\r\n        isPlayable: false,\r\n        canQueue: false,\r\n        canRemoveQueue: false\r\n    })\r\n}\r\n\r\nexport const QueueTrackConfig = () => {\r\n    return ({\r\n        height: 3,\r\n        heightUnit: 'em',\r\n        isPlayable: false,\r\n        canQueue: false,\r\n        canRemoveQueue: true\r\n    })\r\n}","import React, { Component } from 'react';\r\nimport './Sidebar.css';\r\nimport Search from '../../Components/Search/Search.js';\r\nimport SearchResults from '../../Components/Search/SearchResults.js';\r\nimport SocketContext from '../../Utility/Context/SocketContext.js';\r\nimport { Search as SpotifySearch} from 'react-spotify-api';\r\nimport { withRouter } from 'react-router-dom'\r\n\r\nclass Sidebar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      searchConfig: {\r\n        options: {\r\n          limit: 10\r\n        },\r\n        album: true,\r\n        artist: true,\r\n        playlist: true,\r\n        track: true,\r\n        query: ''\r\n      },\r\n      test: null\r\n    };\r\n  }\r\n\r\n  handleSearchChange = (event) => {\r\n    this.setState({searchConfig:{...this.state.searchConfig, query: event.target.value}})\r\n  }\r\n\r\n  shouldComponentUpdate = (nextProps, newState) => {\r\n    if (this.state.searchConfig.query !== newState.searchConfig.query) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div className='sidebar_container'>  \r\n        <Search searchChange={this.handleSearchChange}></Search>\r\n        {this.state.searchConfig.query.length > 0 ? (\r\n        <SpotifySearch {...this.state.searchConfig} children={(searchResult, loading, error) => {\r\n          return searchResult ?\r\n            <SearchResults data={searchResult}></SearchResults> : <div>Search for a song</div>}}>\r\n        </SpotifySearch> ) : \r\n        <div>START SEARCHING</div>\r\n        }\r\n      </div>\r\n    )\r\n  }   \r\n};\r\n\r\nconst SidebarWithSocket = (props) => (\r\n  <SocketContext.Consumer>\r\n    {socket => <Sidebar {...props} socket={socket}></Sidebar>}\r\n  </SocketContext.Consumer>\r\n)\r\n\r\nexport default withRouter(SidebarWithSocket);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './Header.css';\r\nimport logo from '../../../Public/Resources/Images/logo.png';\r\nimport * as actionTypes from '../../Store/Actions/ActionTypes.js';\r\n\r\nconst Header = (props) => {\r\n    return (\r\n        <div className='Header_header'>            \r\n            <ul>\r\n                <li className='Header_logo'><img href=\"/#\" src={logo} alt=\"\"></img><span>Syncify</span></li>\r\n                <li><a onClick={props.logoutUser}>Sign Out</a></li>\r\n                <li><a href='/syncify/home'>Home</a></li>\r\n                \r\n            </ul>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n      logoutUser: () => dispatch({ \r\n        type: actionTypes.LOGOUT_USER\r\n      })\r\n    }\r\n  }\r\n\r\nexport default connect(null, mapDispatchToProps)(Header);","export const LOGOUT_USER = 'LOGOUT_USER';\r\nexport const SET_AUTHENTICATION = 'SET_AUTHENTICATION'\r\nexport const SET_LOGIN = 'SET_LOGIN';\r\nexport const SET_PLAYER = 'SET_PLAYER';\r\nexport const UPDATE_QUEUE = 'UPDATE_QUEUE';\r\n","import React from 'react'\r\nimport TrackView from '../ContentView/TrackView/TrackView.js';\r\nimport Wrapper from '../../Utility/Wrapper/Wrapper.js';\r\nimport { QueueTrackConfig } from '../../Utility/Configuration/TrackViewConfig.js';\r\nimport '../../Utility/Wrapper/Wrapper.css';\r\nimport './QueueBar.css';\r\n\r\nconst QueueBar = (props) => {\r\n    let config = QueueTrackConfig();\r\n    console.log('config: ', config);\r\n\r\n    return(\r\n        <div className='queuebar_container'>\r\n            {props.queue.map((track, index) => (                                \r\n                <Wrapper key={track.trackId + 'queue' + index} className='queuesearchwrapper'>\r\n                    <TrackView track={{\r\n                        name: track.name,\r\n                        uri: track.uri,\r\n                        album: {\r\n                            images: [track.albumSrc]\r\n                        },\r\n                        queuePosition: index\r\n                    }} \r\n                        config={config}>\r\n                    </TrackView>\r\n                </Wrapper>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default QueueBar;","import React, { Component } from 'react';\r\nimport Wrapper from '../../Utility/Wrapper/Wrapper.js';\r\nimport './RoomController.css';\r\nimport socketIOClient from 'socket.io-client';\r\nimport SocketContext from '../../Utility/Context/SocketContext.js';\r\nimport { connect } from 'react-redux';\r\n\r\nclass RoomController extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        }\r\n        //this.socket = socketIOClient('localhost:4000');\r\n    }\r\n\r\n    joinRoom = (roomId) => {\r\n        let userInfo = {\r\n            roomId: roomId,\r\n            userId: this.props.userId\r\n        }\r\n        this.props.socket.emit('joinRoom', userInfo);\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <Wrapper className=\"roommanager_container\">\r\n                <div>\r\n                    <div><button>create Room</button></div>\r\n                </div>\r\n                <div>RoomList\r\n                    <div><button onClick={() => this.joinRoom('room1')}>room1</button></div>\r\n                    <div><button onClick={() => this.joinRoom('room2')}>room2</button></div>\r\n                    <div><button onClick={() => this.joinRoom('room3')}>room3</button></div>\r\n                </div>\r\n            </Wrapper>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n      userId: state.user.id\r\n    }\r\n  };\r\n\r\nconst RoomControllerWithSocket = (props) => (\r\n    <SocketContext.Consumer>\r\n      {socket => <RoomController {...props} socket={socket}></RoomController>}\r\n    </SocketContext.Consumer>\r\n  )\r\n\r\nexport default connect(mapStateToProps)(RoomControllerWithSocket);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Wrapper from '../../Utility/Wrapper/Wrapper.js'\r\nimport TrackView from '../ContentView/TrackView/TrackView.js';\r\nimport { CurrentTrackConfig } from '../../Utility/Configuration/TrackViewConfig.js';\r\nimport './MusicPlayerFooter.css';\r\n\r\nconst MusicPlayerFooter = (props) => { \r\n    return (\r\n        <div className='musicplayerview_container'>\r\n            {/* <Wrapper><TrackView config={CurrentTrackConfig()}></TrackView></Wrapper> */}\r\n            <div>TrackController</div>\r\n            <div>volume control</div>\r\n            <button onClick={() => props.prevClick()}>PREV</button>\r\n            <button onClick={() => props.playClick()}>PLAY</button>\r\n            <button onClick={() => props.nextClick()}>NEXT</button>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n      currentSong: state.currentSong,\r\n      accessToken: state.tokenParams.access_token\r\n    }\r\n};\r\n  \r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeSong: () => {}\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MusicPlayerFooter);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport MusicPlayerFooter from '../../Components/MusicPlayerFooter/MusicPlayerFooter';\r\nimport axios from 'axios';\r\nimport * as actionTypes from '../../Store/Actions/ActionTypes';\r\nimport SocketContext from '../../Utility/Context/SocketContext.js';\r\n\r\nclass SpotifyMusicPlayer extends Component {\r\n  constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n          deviceId: null,\r\n          playingInfo: null,\r\n          playerInitError: false,\r\n          playing: false,\r\n          positionSliderValue: 50,\r\n          volumeSliderValue: 50\r\n      }\r\n      this.playerCheckInterval = null;\r\n      this.player = null;\r\n      this.positionCheckInterval = null;\r\n  }\r\n\r\n  createEventHandlers = () => {\r\n      this.player.on('initialization_error', e => {\r\n        console.error('Initialization error ', e);\r\n        this.setState({ playerInitError: true });\r\n      });\r\n      this.player.on('authentication_error', e =>\r\n        console.error('Authentication error ', e)\r\n      );\r\n      this.player.on('account_error', e => console.error('Account error ', e));\r\n      this.player.on('playback_error', e => console.error('Playback error ', e));\r\n  \r\n      this.player.on('player_state_changed', state => {\r\n        if (state) {\r\n          //logger.log('player state changed', state);\r\n          let { duration, position } = state;\r\n          // duration = 100%\r\n          // position = ?%\r\n          let val = (position * 100) / duration;\r\n          this.setState({\r\n            playingInfo: state,\r\n            playing: !state.paused,\r\n            positionSliderValue: val\r\n          });\r\n  \r\n          // Music started playing, start the position interval\r\n          if (!this.props.isPlaying && !state.paused) {\r\n            this.positionCheckInterval = setInterval(() => {\r\n              this.checkChangePosition();\r\n            }, 1000);\r\n          }\r\n  \r\n          // Music stopped playing, clear the position interval\r\n          if (this.props.isPlaying && state.paused) {\r\n            clearInterval(this.positionCheckInterval);\r\n          }\r\n  \r\n          if (this.props.isPlaying === state.paused) {\r\n              //add back in jayr was testing\r\n            //this.props.setIsPlaying(!state.paused);\r\n          }\r\n  \r\n          if (\r\n            !this.props.currentlyPlaying ||\r\n            this.props.currentlyPlaying !== state.track_window.current_track.name\r\n          ) {\r\n            let { current_track } = state.track_window;\r\n            // add back in jayr was causing error for now wanted to test functionality\r\n            //this.props.setCurrentlyPlaying(current_track.name);\r\n          }\r\n        }\r\n      });\r\n  \r\n      this.player.on('ready', data => {\r\n        let { device_id } = data;\r\n        this.setState({ deviceId: device_id }, () => {\r\n          this.transferPlaybackHere();\r\n        });\r\n        this.player.getVolume().then(vol => {\r\n          let volume = vol * 100;\r\n          this.setState({ volumeSliderValue: volume });\r\n        });\r\n      });\r\n  };\r\n\r\n  checkForPlayer = () => {\r\n    if (window.Spotify) {\r\n        clearInterval(this.playerCheckInterval);\r\n\r\n        const token = this.props.accessToken;\r\n        this.player = new window.Spotify.Player({\r\n            name: 'Syncify Player',\r\n            getOAuthToken: (cb) => { cb(token); }\r\n        });\r\n\r\n        if (this.player) {                \r\n            this.createEventHandlers();          \r\n            this.player.connect();\r\n            console.log(\"success\");\r\n        }\r\n    }\r\n\r\n  }\r\n\r\n\r\n  changeSong = ({\r\n    position_ms,\r\n    spotify_uri,\r\n    playerInstance: {\r\n      _options: {\r\n        getOAuthToken,\r\n        id\r\n      }\r\n    }\r\n  }) => {\r\n    getOAuthToken(access_token => {\r\n      fetch(`https://api.spotify.com/v1/me/player/play?device_id=${id}`, {\r\n        method: 'PUT',\r\n        body: JSON.stringify({ uris: [spotify_uri], position_ms: position_ms }),\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${access_token}`\r\n        }\r\n      });\r\n    });\r\n  };\r\n\r\n  pauseSong = ({\r\n    playerInstance: {\r\n      _options: {\r\n        getOAuthToken,\r\n        id\r\n      }\r\n    }\r\n  }) => {\r\n    getOAuthToken(access_token => {\r\n      fetch(`\thttps://api.spotify.com/v1/me/player/pause?device_id=${id}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${access_token}`\r\n        },\r\n      });\r\n    });\r\n  };\r\n\r\n  transferPlaybackHere = () => {\r\n    // ONLY FOR PREMIUM USERS - transfer the playback automatically to the web app.\r\n    // for normal users they have to go in the spotify app/website and change the device manually\r\n    // user type is stored in redux state => this.props.user.type\r\n    const { deviceId } = this.state;\r\n    fetch('https://api.spotify.com/v1/me/player', {\r\n      method: 'PUT',\r\n      headers: {\r\n        Authorization: `Bearer ${this.props.accessToken}`,\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        device_ids: [deviceId],\r\n        play: false\r\n      })\r\n    })\r\n      .then(res => {\r\n        //logger.log('status', res.status);\r\n        if (res.status === 204) {\r\n          axios\r\n            .get('https://api.spotify.com/v1/me/player', {\r\n              headers: {\r\n                Authorization: `Bearer ${this.props.accessToken}`\r\n              }\r\n            })\r\n            .then(() => {\r\n              // Transferred playback successfully, get current timestamp\r\n              this.CheckChangePosition();\r\n            })\r\n            .catch(err => {\r\n              //logger.log(err);\r\n            });\r\n        }\r\n      })\r\n      .catch(e => console.error(e));\r\n\r\n    // logger.log('Hello', this.props);\r\n    // if (this.props.user.product === 'premium') {\r\n    // } else {\r\n    //   logger.log(\r\n    //     'Cannot transfer playback automatically because you are not a premium user.'\r\n    //   );\r\n    // }\r\n  };\r\n\r\n  checkChangePosition = () => {\r\n    this.player.getCurrentState().then( (state) => {\r\n      if (state) {\r\n        let { duration, position } = state;\r\n        // duration = 100%\r\n        // position = ?%\r\n        let val = (position * 100) / duration;\r\n        if (val !== this.state.positionSliderValue) {\r\n          this.setState({\r\n            positionSliderValue: val\r\n          });\r\n        }\r\n\r\n        let positionStamp = this.milisToMinutesAndSeconds(state.position);\r\n        let durationStamp = this.milisToMinutesAndSeconds(state.duration);\r\n        this.setState({ positionStamp, durationStamp });\r\n      }\r\n    });\r\n  };\r\n\r\n\r\n  milisToMinutesAndSeconds = (mil) => {\r\n    let minutes = Math.floor(mil / 60000);\r\n    let seconds = ((mil % 60000) / 1000).toFixed(0);\r\n    return minutes + ':' + (seconds < 10 ? '0' : '') + seconds;\r\n  };\r\n\r\n  timeStringToMilis = (timeString) => {\r\n    let a = timeString.split(':'); \r\n    return ((+a[0]) + (+a[1])) * 1000; \r\n  }\r\n  \r\n  playClick = () => {\r\n    // todo make if else branch to emit either 'playClick' or 'playPause' \r\n    // depending on the current play state of the player.\r\n\r\n\r\n    this.player.getCurrentState().then( (state) => {\r\n      if (state) {\r\n        let { duration, position } = state;\r\n        // duration = 100%\r\n        // position = ?%\r\n        let val = (position * 100) / duration;\r\n\r\n        //todo see if this needs to be passsed to the payload below\r\n        // if (val !== this.state.positionSliderValue) {\r\n        //   this.setState({\r\n        //     positionSliderValue: val\r\n        //   });\r\n        // }\r\n\r\n        let positionStamp = this.milisToMinutesAndSeconds(state.position);\r\n        let durationStamp = this.milisToMinutesAndSeconds(state.duration);\r\n\r\n        let payload = { \r\n          trackInfo: {\r\n            uri: state.context.uri,\r\n            positionTimestamp: state.position,\r\n            durationTimestamp: state.duration,\r\n            positionSliderValue: val,\r\n            paused: state.paused\r\n          },\r\n          userInfo: {\r\n            userId: this.props.userId\r\n          }\r\n        }\r\n        this.props.socket.emit('playClick', payload)\r\n      }\r\n    });\r\n  };\r\n\r\n  prevClick = () => {        \r\n    let payload = {\r\n      userInfo: {\r\n        userId: this.props.userId\r\n      }\r\n    }\r\n    this.props.socket.emit('prevClick', payload)\r\n  };\r\n  \r\n  nextClick = () => {\r\n    let payload = {\r\n      userInfo: {\r\n        userId: this.props.userId\r\n      }\r\n    }\r\n    this.props.socket.emit('nextClick', payload)\r\n  };\r\n\r\n  syncPlayClick = (payload) => {\r\n\r\n    console.log(payload.trackInfo)\r\n    this.player.getCurrentState().then((state) => {\r\n      if (state.context.uri !== payload.trackInfo.uri) {\r\n        this.changeSong({\r\n          playerInstance: this.player,\r\n          spotify_uri: payload.trackInfo.uri,\r\n          position_ms: payload.trackInfo.positionTimestamp ? payload.trackInfo.positionTimestamp : 0\r\n        });\r\n      }  \r\n    })\r\n  }\r\n\r\n  syncPrevClick = (payload) => {\r\n    this.changeSong({\r\n      playerInstance: this.player,\r\n      spotify_uri: payload.trackInfo.uri,\r\n      position_ms: 0\r\n    });\r\n  }\r\n\r\n  syncNextClick = (payload) => {\r\n    this.changeSong({\r\n      playerInstance: this.player,\r\n      spotify_uri: payload.trackInfo.uri,\r\n      position_ms: 0\r\n    });\r\n  }\r\n\r\n  updatePlayer = (payload) => {\r\n    if (payload) {\r\n      let currentTime = Date.now();\r\n      let startTime = new Date(payload.startTimestamp);\r\n      let position_ms = currentTime - startTime + 200;\r\n\r\n      this.changeSong({\r\n        playerInstance: this.player,\r\n        spotify_uri: payload.uri,\r\n        position_ms: position_ms,\r\n      });\r\n    } else {\r\n      this.pausePlayer({\r\n        playInstance: this.player\r\n      })\r\n    }\r\n\r\n  }\r\n\r\n  pausePlayer = () => {\r\n    this.pauseSong({\r\n      playerInstance: this.player\r\n    })\r\n  }\r\n\r\n  componentDidMount = () => {\r\n      this.playerCheckInterval = setInterval(() => this.checkForPlayer(), 1000);\r\n      if (this.props.socket) {\r\n        this.props.socket.on('playClick', (payload) => { this.syncPlayClick(payload); })\r\n        this.props.socket.on('prevClick', (payload) => { this.syncPrevClick(payload) })\r\n        this.props.socket.on('nextClick', (payload) => { this.syncNextClick(payload) })\r\n        this.props.socket.on('pauseClick', (payload) => {this.pausePlayer(payload) })\r\n        this.props.socket.on('updateNewUser', (payload) => { this.updatePlayer(payload) })\r\n        \r\n      }\r\n\r\n  }\r\n\r\n  render() {\r\n      return (\r\n          <div>\r\n              <MusicPlayerFooter \r\n                playClick={this.playClick}\r\n                prevClick={this.prevClick}\r\n                nextClick={this.nextClick}>  \r\n              </MusicPlayerFooter>                \r\n          </div>\r\n      )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n      accessToken: state.tokenParams.access_token,\r\n      isLoggedIn: state.isLoggedIn,\r\n      isAuthenticated: state.isAuthenticated,\r\n      isPlaying: state.isPlaying,\r\n      userId: state.user.id\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setPlayer: (player) => dispatch({ type: actionTypes.SET_PLAYER, payload : { player: player}})\r\n    }\r\n}\r\n\r\n\r\nconst SpotifyMusicPlayerWithSocket = (props) => (\r\n  <SocketContext.Consumer>\r\n    {socket => <SpotifyMusicPlayer {...props} socket={socket}></SpotifyMusicPlayer>}\r\n  </SocketContext.Consumer>\r\n)\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(SpotifyMusicPlayerWithSocket);","import React, { Component } from 'react';\r\nimport Sidebar from '../Sidebar/Sidebar.js';\r\nimport Header from '../../Components/Header/Header.js';\r\nimport QueueBar from '../../Components/QueueBar/QueueBar.js';\r\nimport RoomController from '../RoomController/RoomController.js';\r\nimport { SpotifyApiContext } from 'react-spotify-api';\r\nimport { withRouter } from 'react-router-dom';\r\nimport SpotifyMusicPlayer from '../SpotifyMusicPlayer/SpotifyMusicPlayer.js';\r\nimport socketIOClient from 'socket.io-client';\r\nimport SocketContext from '../../Utility/Context/SocketContext.js';\r\nimport './MusicRoom.css';\r\n\r\nclass MusicRoom extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            response: null,\r\n            queue: []\r\n        }\r\n        this.socket = socketIOClient('localhost:4000');\r\n    }\r\n\r\n    updateQueue = (newQueue) => {\r\n        this.setState({queue: newQueue});\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        if (this.socket) {\r\n            this.socket.on('updateQueue', (newQueue) => { this.updateQueue(newQueue)});\r\n            this.socket.on('updateNewUserQueue', (newQueue) => { this.updateQueue(newQueue)});\r\n        }    \r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <SocketContext.Provider value={this.socket}>\r\n                <SpotifyApiContext.Provider value={this.props.accessToken}>\r\n                    <Header></Header>          \r\n\r\n                    <div className='musicroom_sidebar_container'>\r\n                        <Sidebar></Sidebar>\r\n                        <QueueBar queue={this.state.queue}></QueueBar>\r\n                    </div>\r\n                    \r\n                    <RoomController></RoomController>\r\n                    <div>ChatRoom</div>\r\n                    <SpotifyMusicPlayer></SpotifyMusicPlayer>                               \r\n                </SpotifyApiContext.Provider>\r\n            </SocketContext.Provider>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(MusicRoom);","import React from 'react';\r\nimport { Redirect, withRouter } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nconst Authenticate = (props) => {\r\n\r\n    if (!props.isAuthenticated) {\r\n        return (\r\n            <div>\r\n            <div>Logging In...</div>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div>\r\n            <div>Authentication Success...</div>           \r\n            <Redirect  to='/'></Redirect>\r\n        </div>)\r\n        \r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n      isLoggedIn: state.isLoggedIn,\r\n      isAuthenticated: state.isAuthenticated\r\n    }\r\n};\r\n\r\nexport default withRouter(connect(mapStateToProps)(Authenticate));","import React from 'react';\r\nconst LogonPage = (props) => {\r\n    return (\r\n    <div>\r\n\r\n          <label>Email: </label> <input type=\"text\"></input>\r\n          <label>Password: </label> <input type=\"text\"></input>\r\n          <button onClick={props.authenticateUser}>Submit</button>\r\n\r\n        <div hidden={true}> Invalid User or Password</div>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default LogonPage;","import React, { Component } from 'react';\r\nimport {RetrieveAccessToken, ReturnAuthorizeQueryString, RetrieveUserInfo, GetUrlVars} from '../../../api/Spotify/Spotify.js';\r\nimport { Switch, Route, Redirect, withRouter } from 'react-router-dom';\r\nimport Authenticate from '../../Components/Authenticate/Authenticate.js';\r\nimport LogonPage from '../../Components/LogonPage/LogonPage.js';\r\nimport { connect } from 'react-redux';\r\nimport * as actionTypes from '../../Store/Actions/ActionTypes.js';\r\n\r\nclass Logon extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isAuthenticated: false\r\n    }\r\n  }\r\n\r\n  AccessTokenCallBack = (resp) => {    \r\n      this.SetAuthentication(resp['body']);\r\n  }\r\n\r\n  SetAuthentication = (params) => {\r\n    let authStatus = true;\r\n    if (params.includes('error')) {\r\n      authStatus = false;\r\n    } else {\r\n      params = JSON.parse(params);\r\n    }    \r\n    RetrieveUserInfo(params, (data) => {\r\n      let newUser = {\r\n        access_token: params.access_token,\r\n        displayName: data.display_name,\r\n        email: data.email,\r\n        id: data.id,\r\n        type: data.type,\r\n        country: data.country,\r\n        product: data.product\r\n      };\r\n      \r\n      //this.setState({isAuthenticated : authStatus})\r\n      this.props.setAuthentication(authStatus, params, newUser); \r\n    });    \r\n\r\n  }\r\n\r\n  SetAuthState = (status) => {\r\n    this.setState({isAuthenticated: status})\r\n  }\r\n  \r\n  componentDidMount = () => {\r\n      let authorizeCode = GetUrlVars()['code'] || null;\r\n      if (authorizeCode) {\r\n        RetrieveAccessToken(authorizeCode, this.AccessTokenCallBack);      \r\n      }\r\n  }\r\n\r\n  authenticateUser = () => {\r\n    setTimeout(() => {\r\n      this.props.setUserLogin(true);\r\n      window.location.href = ReturnAuthorizeQueryString();\r\n    }, 1000)\r\n  }\r\n\r\n  render() {\r\n\r\n    let match  = this.props.match;    \r\n    return (   \r\n        <div>\r\n          <Switch>\r\n            <Route exact path={match.path + '/'}><LogonPage authenticateUser={this.authenticateUser}></LogonPage> </Route>\r\n            <Route exact path={match.path + '/authenticate'}><Authenticate></Authenticate> </Route>     \r\n          </Switch>\r\n        </div>\r\n        \r\n    )\r\n  };\r\n}\r\n  \r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    isLoggedIn: state.isLoggedIn,\r\n    isAuthenticated: state.isAuthenticated\r\n  }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    setAuthentication: (authStatus, tokenParams, user) => dispatch({ \r\n      type: actionTypes.SET_AUTHENTICATION, \r\n      payload : { \r\n        authStatus: authStatus, \r\n        tokenParams: {...tokenParams},\r\n        user: {...user}\r\n      }\r\n    }),\r\n    setUserLogin: (loginStatus) => dispatch({ type: actionTypes.SET_LOGIN, payload : { status: loginStatus}})\r\n  }\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Logon));\r\n  ","import React, { Component } from 'react';\nimport Wrapper from './Utility/Wrapper/Wrapper.js';\nimport MusicRoom from './Containers/MusicRoom/MusicRoom.js';\nimport Logon from './Containers/Logon/Logon.js';\nimport { connect } from 'react-redux'\nimport { BrowserRouter as Router, Switch, Route, Redirect, withRouter } from 'react-router-dom';\nimport { SpotifyApiContext } from 'react-spotify-api';\n\n\nconst PrivateRoute = ({ component: Component, ...rest }) => (\n\n  <Route {...rest} render={(props) => (\n    //  (rest.location.state !== undefined && rest.location.state.isLoggedIn === true)\n      (rest.isLoggedIn && rest.isAuthenticated)\n      ? (<Component {...props}> <SpotifyApiContext.Provider value={rest.accessToken}>\n        <MusicRoom accessToken={rest.accessToken}></MusicRoom>     \n      </SpotifyApiContext.Provider> </Component>)\n      : (<Redirect to={{ pathname: '/syncify/logon', state: { from: props.location } }}/>)\n  )} />\n)\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n\n    }\n  }\n\n  render() {\n    return (   \n\n\n          <Switch>            \n            <Route path='/syncify/logon' component={Logon}></Route>         \n            <PrivateRoute \n              path='/' \n              component={Wrapper} \n              isLoggedIn={this.props.isLoggedIn} \n              isAuthenticated={this.props.isAuthenticated} \n              accessToken={this.props.accessToken}>              \n            </PrivateRoute>\n            <Route path='*'><div>NO MATCH</div></Route>\n            \n          </Switch>\n        \n    )\n  }    \n}\n\nconst mapStateToProps = (state) => {\n  return {\n    isLoggedIn: state.isLoggedIn,\n    isAuthenticated: state.isAuthenticated,\n    accessToken: state.tokenParams.access_token\n  }\n};\n\nexport default withRouter(connect(mapStateToProps)(App));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actionTypes from '../Actions/ActionTypes.js';\r\n\r\nconst initialState = {\r\n    isLoggedIn: false,\r\n    isAuthenticated: false,\r\n    isPlaying: false,\r\n    player: null,\r\n    tokenParams: {},\r\n    user: {}\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.LOGOUT_USER: {\r\n            return {\r\n                ...state,\r\n                isLoggedIn: false,\r\n                isAuthenticated: false,\r\n                tokenParams: {},\r\n                user: {},\r\n            }\r\n        }\r\n        case actionTypes.SET_AUTHENTICATION: {\r\n            return {\r\n                ...state,\r\n                isAuthenticated: action.payload.authStatus,\r\n                tokenParams: {...action.payload.tokenParams},\r\n                user: {...action.payload.user}\r\n            }\r\n        } \r\n        case actionTypes.SET_LOGIN: {\r\n            return {\r\n                ...state,\r\n                isLoggedIn: action.payload.status\r\n            }\r\n        }       \r\n        case actionTypes.SET_PLAYER: {\r\n            return {\r\n                ...state,\r\n                player: {...action.payload.player}\r\n            }\r\n        }  \r\n        default: {\r\n            return state\r\n        }\r\n\r\n\r\n    }\r\n}\r\n\r\nexport default reducer;","import { createStore } from 'redux'\r\nimport { persistStore, persistReducer } from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage' // defaults to localStorage for web\r\n\r\nimport rootReducer from '../Reducers/reducer'\r\n\r\nconst persistConfig = {\r\n  key: 'root',\r\n  storage,\r\n}\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\r\n\r\nexport default () => {\r\n  let store = createStore(persistedReducer)\r\n  let persistor = persistStore(store)\r\n  return { store, persistor }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './app/js/index.css'\nimport App from './app/js/App';\nimport * as serviceWorker from './app/js/serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport storeAndPersistor from './app/js/Store/Config/configureStore.js';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport ScriptTag from 'react-script-tag';\n\nReactDOM.render(\n    <Provider store={storeAndPersistor().store}>\n        <PersistGate loading={null} persistor={storeAndPersistor().persistor}>\n            <Router>\n                <ScriptTag isHydrating={true} type=\"text/javascript\" src=\"https://sdk.scdn.co/spotify-player.js\" />\n                <App />\n            </Router>\n        </PersistGate>\n    </Provider>,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import axios from 'axios';\r\nvar request = require('request');\r\n\r\n\r\nexport const authEndpoint = 'https://accounts.spotify.com/authorize?';\r\n\r\nconst clientId = process.env.REACT_APP_CLIENT_ID;\r\nconst clientSecret =  process.env.REACT_APP_CLIENT_SECRET;\r\nconst redirectUri = process.env.REACT_APP_REDIRECT_URI;\r\n\r\nconst scopes = [\r\n  \"streaming\",\r\n  \"user-read-email\",\r\n  \"user-read-private\",\r\n  \"user-read-playback-state\",\r\n  \"user-modify-playback-state\",\r\n  \"user-library-read\",\r\n  \"user-library-modify\",\r\n\r\n];\r\n\r\nexport function RetrieveAccessToken(token, callback) {\r\n    var form = {\r\n        grant_type: \"authorization_code\",\r\n        code: token,\r\n        redirect_uri: redirectUri\r\n    }\r\n\r\n    var headers = {\r\n        'Content-Type': 'application/x-www-form-urlencoded',\r\n        'Authorization': 'Basic ' + (new Buffer(clientId + ':' + clientSecret).toString('base64')) \r\n    }\r\n\r\n    request.post({\r\n        url: 'https://accounts.spotify.com/api/token',\r\n        form: form,\r\n        headers: headers\r\n    }, function(error, resp) {\r\n        callback(resp);\r\n    }); \r\n}\r\n\r\nexport var RetrieveUserInfo = (params, callback) => {\r\n    if ('access_token' in params) {\r\n    axios\r\n      .get('https://api.spotify.com/v1/me', {\r\n        headers: {\r\n          Authorization: `Bearer ${params.access_token}`\r\n        }\r\n      })\r\n      .then(({ data }) => {\r\n          console.log(data);\r\n          callback(data);\r\n      })\r\n      .catch(err => console.log(err));\r\n  } else {\r\n    window.location = `https://accounts.spotify.com/authorize?client_id=${process.env.REACT_APP_SPOTIFY_CLIENT_ID}&redirect_uri=${process.env.REACT_APP_SPOTIFY_REDIRECT_URI}&scope=${process.env.REACT_APP_SPOTIFY_SCOPE}&response_type=token`;\r\n  }\r\n}\r\n\r\nexport function ReturnAuthorizeQueryString() {\r\n    return `${authEndpoint}client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join(\"%20\")}&response_type=code&show_dialog=true`;\r\n}\r\n\r\nexport function GetUrlVars() {\r\n    var vars = {};\r\n    window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi, function(m,key,value) {\r\n        vars[key] = value;\r\n    });\r\n    return vars;\r\n}\r\n\r\n"],"sourceRoot":""}